# -*- coding: utf-8 -*-  

"""
Created on 2024/6/3

@author: Ruoyu Chen
"""

import argparse

import os
import cv2
import numpy as np
import tensorflow as tf
from PIL import Image
from matplotlib import pyplot as plt

from xplique.wrappers import TorchWrapper
from xplique.metrics import MuFidelity, Insertion, Deletion

from open_clip import create_model_from_pretrained, get_tokenizer

import torch
import torchvision.transforms as transforms

from utils import *

from tqdm import tqdm

tf.config.run_functions_eagerly(True)

gpus = tf.config.experimental.list_physical_devices(device_type='GPU')
tf.config.experimental.set_virtual_device_configuration(
    gpus[0],
    [tf.config.experimental.VirtualDeviceConfiguration(memory_limit=4048)]
)

data_transform = transforms.Compose(
        [
            transforms.Resize(
                (224,224), interpolation=transforms.InterpolationMode.BICUBIC
            ),
            # transforms.CenterCrop(224),
            transforms.ToTensor(),
            transforms.Normalize(
                mean=(0.48145466, 0.4578275, 0.40821073),
                std=(0.26862954, 0.26130258, 0.27577711),
            ),
        ]
    )

def transform_vision_data(image_path, channel_first=False):
    """
    Input:
        image: An image read by opencv [w,h,c]
    Output:
        image: After preproccessing, is a tensor [c,w,h]
    """
    image =cv2.imread(image_path)
    
    image = Image.fromarray(image)
    image = data_transform(image)
    if channel_first:
        pass
    else:
        image = image.permute(1,2,0)
    return image.numpy()

def parse_args():
    parser = argparse.ArgumentParser(description='Deletion Metric')
    # general
    parser.add_argument('--Datasets',
                        type=str,
                        default='datasets/medical_lung/lung_dataset',
                        help='Datasets.')
    parser.add_argument('--eval-list',
                        type=str,
                        default='datasets/medical_lung/LC25000_lung_quilt_1k_false.txt',
                        help='Datasets.')
    parser.add_argument('--eval-number',
                        type=int,
                        default=-1,
                        help='Datasets.')
    parser.add_argument('--explanation-method', 
                        type=str, 
                        default='./explanation_results/lung-quilt-false/KernelShap',
                        help='Save path for saliency maps generated by interpretability methods.')
    args = parser.parse_args()
    return args

class QuiltModel_Super(torch.nn.Module):
    def __init__(self, 
                 download_root=".checkpoints/QuiltNet-B-32",
                 device = "cuda"):
        super().__init__()
        self.model, _ = create_model_from_pretrained('hf-hub:wisdomik/QuiltNet-B-32', cache_dir=download_root)
        self.device = device
            
    def forward(self, vision_inputs):
        
        with torch.no_grad():
            image_features = self.model.encode_image(vision_inputs)
            # image_features /= image_features.norm(dim=-1, keepdim=True)
        
        scores = (image_features @ self.semantic_feature.T).softmax(dim=-1)
        return scores.float()
    
def main(args):
    class_number = 3
    
    # data preproccess
    with open(args.eval_list, "r") as f:
        datas = f.read().split('\n')
        
    label = []
    input_image = []
    explanations = []
    
    for data in tqdm(datas[ : args.eval_number]):
        label.append(int(data.strip().split(" ")[-1]))
        input_image.append(
            transform_vision_data(os.path.join(args.Datasets, data.split(" ")[0]))
        )
        explanations.append(
            np.load(
                os.path.join(args.explanation_method, data.split(" ")[0].replace(".jpeg", ".jpeg.npy")))
        )
        
    label_onehot = tf.one_hot(np.array(label), class_number)
    input_image = np.array(input_image)
    explanations = np.array(explanations)
    
    device = "cuda" if torch.cuda.is_available() else "cpu"
    vis_model = QuiltModel_Super()
    vis_model.eval()
    vis_model.to(device)
    
    tokenizer = get_tokenizer('hf-hub:wisdomik/QuiltNet-B-32')
    texts = tokenizer([lc_lung_template + l for l in lc_lung_classes], context_length=77).to(device)

    with torch.no_grad():
        semantic_feature = vis_model.model.encode_text(texts) * 10

    vis_model.semantic_feature = semantic_feature
    
    model = TorchWrapper(vis_model.eval(), device)
    torch.cuda.empty_cache()
    
    # original
    deletion_metric = Deletion(model, input_image, label_onehot, steps=50)
    insertion_metric = Insertion(model, input_image, label_onehot, steps=50)

    deletion_score_org = deletion_metric(explanations)
    insertion_score_org = insertion_metric(explanations)
    
    print("{} Attribution Method Deletion Score: {}".format(args.explanation_method.split("/")[-1], deletion_score_org))
    print("{} Attribution Method Insertion Score: {}".format(args.explanation_method.split("/")[-1], insertion_score_org))
    return 
    
if __name__ == "__main__":
    args = parse_args()
    main(args)