# -- coding: utf-8 --**

"""
Created on 2023/12/1

@author: Ruoyu Chen
"""

import argparse

import os
import os
import json
import cv2
import numpy as np
from matplotlib import pyplot as plt
from PIL import Image

from tqdm import tqdm

from sklearn import metrics

steps = 50

def parse_args():
    parser = argparse.ArgumentParser(description='Faithfulness Metric')
    parser.add_argument('--explanation-dir', 
                        type=str, 
                        default='explanation_insertion_results/imagenet-fair-languagebind/ViT-CX',
                        help='Save path for saliency maps generated by our methods.')
    args = parser.parse_args()
    return args

def main(args):
    insertion_aucs = []
    deletion_aucs = []

    json_root_file = args.explanation_dir

    json_file_names = os.listdir(json_root_file)
    for json_file_name in json_file_names:
        json_file_path = os.path.join(json_root_file, json_file_name)

        with open(json_file_path, 'r', encoding='utf-8') as f:
            saved_json_file = json.load(f)            

        insertion_area = []
        deletion_area = []
        
        for i in range(steps+1):
            insertion_area.append(i / steps)
            deletion_area.append(1 - i / steps)
        
        insertion_score = saved_json_file["consistency_score"]
        deletion_score = saved_json_file["collaboration_score"]
        
        insertion_score = np.array([deletion_score[-1]] + insertion_score)
        deletion_score = np.array([insertion_score[-1]] + deletion_score)
        

        insertion_auc = metrics.auc(np.array(insertion_area), insertion_score)
        deletion_auc = metrics.auc(np.array(deletion_area), deletion_score)
        insertion_aucs.append(insertion_auc)
        deletion_aucs.append(deletion_auc)

    insertion_auc_score = np.array(insertion_aucs).mean()
    deletion_auc_score = np.array(deletion_aucs).mean()
    print("Insertion AUC Score: {:.4f}\nDeletion AUC Score: {:.4f}".format(insertion_auc_score, deletion_auc_score))
    return

if __name__ == "__main__":
    args = parse_args()
    main(args)